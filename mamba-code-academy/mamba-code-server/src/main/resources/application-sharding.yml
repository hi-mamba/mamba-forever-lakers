spring:
  shardingsphere:
    datasource:
      db01:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://172.23.3.19:3306/learning_sharding_jdbc_01
        username: test
        password: test
        type: com.alibaba.druid.pool.DruidDataSource
      db02:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://172.23.3.19:3306/learning_sharding_jdbc_02
        username: test
        password: test
        type: com.alibaba.druid.pool.DruidDataSource
      names: db01,db02 # 连接名称，和上面对应。如果有多个主库则配置master1,master1slave1，名字可以随便起，对应起来就好
    sharding:
      broadcast-tables: # 配置广播表，适合数据量不大，但是每个数据源都存在的表
        - xtgy_chaxunympz
      default-data-source-name: db01 #默认数据源，没有配置分库分表规则的表，会使用默认数据源
      master-slave-rules: #配置主从规则
        db01:
          master-data-source-name: db01
          slave-data-source-names: db01
      tables: #配置各表的路由规则
        table_name: #表名
          actual-data-nodes: db01.user_info_$->{0..4} #实际表名 table_name_0 至 table_name_127
          key-generator: #主键生成策略
            column: id
            type: UUID
          table-strategy: #分表规则
            inline:
              algorithm-expression: user_info_$->{id % 4} # 分表规则为customer_id字段取模customer_id %128
              sharding-column: id #用于分表的键
