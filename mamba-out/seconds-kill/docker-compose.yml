version: '3'

services:
  mysql5.7:
    image: bitnami/mysql:5.7.26
    container_name: mysql57
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mamba
      MYSQL_DATABASE: lakers
      MYSQL_USER: mamba
      MYSQL_PASSWORD: mamba
    ports:
      - 3306:3306
    volumes:
      - ./docker/mysql:/docker-entrypoint-initdb.d
  redis-cluster:
    image: grokzen/redis-cluster:5.0.12
    # must override the hardcoded ip in the container
    environment:
      IP: "0.0.0.0"
    ports:
      - "7000:7000"
      - "7001:7001"
      - "7002:7002"

  zookeeper:
    image: wurstmeister/zookeeper
    environment:
      JMX: 9000
      ES_JAVA_OPTS: "-Xms255m -Xmx255m"
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka  #这个镜像使用文档见https://github.com/wurstmeister/kafka-docker
    ports:
      - "9092:9092"
    expose:
      - "9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1  #docker宿主机的IP，直接ifconfig获取，这是重点，否则，在容器内部启动生产者消费者都会失败的
      KAFKA_CREATE_TOPICS: "test:1:1"  #自动创建一个默认的topic
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  #不禁用掉自动创建topic的功能，使用上面的镜像，kafka的参数设置都可以以这样的方式进行设置
      ES_JAVA_OPTS: "-Xms255m -Xmx255m"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock